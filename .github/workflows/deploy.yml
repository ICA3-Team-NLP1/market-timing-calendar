name: Deploy to Amazon ECS

on:
  push:
    branches: [ main, feature/add_github_action ]
  pull_request:
    branches: [ main ]
    types: [ closed ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: market-timing-calendar
  ECS_CLUSTER: market-timing-calendar
  ECS_SERVICE: market-timing-calendar-service
  ECS_TASK_DEFINITION: market-timing-app
  CONTAINER_NAME: market-timing-calendar

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy FastAPI App to ECS
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true || github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # FastAPI 메인 앱 빌드 및 배포
    - name: Build and push FastAPI app image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # 메인 FastAPI 앱 이미지 빌드 (production 스테이지)
        echo "🔍 빌드 인수 확인:"
        echo "  FIREBASE_SERVICE_ACCOUNT_KEY 존재 여부: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY != '' }}"
        echo "  AWS_ACCESS_KEY_ID 존재 여부: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}"
        echo "  AWS_SECRET_ACCESS_KEY 존재 여부: ${{ secrets.AWS_SECRET_ACCESS_KEY != '' }}"
        
        docker build \
          --target production \
          --build-arg VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }} \
          --build-arg VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }} \
          --build-arg VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }} \
          --build-arg VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }} \
          --build-arg VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }} \
          --build-arg VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }} \
          --build-arg VITE_FIREBASE_MEASUREMENT_ID=${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }} \
          --build-arg FIREBASE_SERVICE_ACCOUNT_KEY='${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}' \
          --build-arg AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}' \
          --build-arg AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          .
        
        # ECR에 푸시
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    # 현재 태스크 정의 가져와서 새 이미지로 업데이트
    - name: Get current task definition and update image
      id: update-task-def
      env:
        IMAGE_URI: ${{ steps.build-image.outputs.image }}
      run: |
        # 현재 태스크 정의 가져오기
        aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query 'taskDefinition' \
          --output json > current-task-def.json
        
        # 새 이미지로 업데이트
        cat current-task-def.json | jq \
          --arg IMAGE_URI "$IMAGE_URI" \
          '.containerDefinitions[0].image = $IMAGE_URI | 
           del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' \
          > updated-task-def.json
        
        # 새로운 태스크 정의 등록
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://updated-task-def.json \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        
        echo "새로운 태스크 정의: $NEW_TASK_DEF_ARN"
        echo "task-definition-arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

    # ECS 서비스 업데이트
    - name: Deploy to ECS service
      env:
        TASK_DEFINITION_ARN: ${{ steps.update-task-def.outputs.task-definition-arn }}
      run: |
        echo "ECS 서비스 업데이트 시작..."
        
        # 서비스 업데이트
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --task-definition $TASK_DEFINITION_ARN \
          --force-new-deployment

        echo "서비스 업데이트 완료. 안정화 대기 중..."

    # 배포 상태 확인
    - name: Wait for service stability
      run: |
        echo "서비스 안정화 대기 중... (최대 10분)"
        
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }}
        
        echo "✅ 서비스가 안정화되었습니다!"

    # Background Worker 이미지 빌드 및 배포
    - name: Build and push background worker image
      id: build-background-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "🔨 Background Worker 이미지 빌드 시작..."
        
        # Background Worker 이미지 빌드
        docker build \
          -f background/Dockerfile \
          --build-arg AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}' \
          --build-arg AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
          -t $ECR_REGISTRY/$ECR_REPOSITORY-background:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY-background:latest \
          .
        
        # ECR에 푸시
        docker push $ECR_REGISTRY/$ECR_REPOSITORY-background:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY-background:latest
        
        echo "background-image=$ECR_REGISTRY/$ECR_REPOSITORY-background:latest" >> $GITHUB_OUTPUT
        echo "✅ Background Worker 이미지 빌드 및 푸시 완료!"

    # Background Worker 태스크 정의 업데이트
    - name: Update background worker task definition
      id: update-background-task-def
      env:
        BACKGROUND_IMAGE_URI: ${{ steps.build-background-image.outputs.background-image }}
      run: |
        echo "📝 Background Worker 태스크 정의 업데이트 중..."
        
        # 현재 Background Worker 태스크 정의 가져오기
        aws ecs describe-task-definition \
          --task-definition market-timing-background \
          --query 'taskDefinition' \
          --output json > current-background-task-def.json
        
        # 새 이미지로 업데이트
        cat current-background-task-def.json | jq \
          --arg IMAGE_URI "$BACKGROUND_IMAGE_URI" \
          '.containerDefinitions[0].image = $IMAGE_URI | 
           del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' \
          > updated-background-task-def.json
        
        # 새로운 태스크 정의 등록
        NEW_BACKGROUND_TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://updated-background-task-def.json \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        
        echo "새로운 Background Worker 태스크 정의: $NEW_BACKGROUND_TASK_DEF_ARN"
        echo "background-task-definition-arn=$NEW_BACKGROUND_TASK_DEF_ARN" >> $GITHUB_OUTPUT

    # Background Worker 서비스 배포
    - name: Deploy background worker service
      env:
        BACKGROUND_TASK_DEFINITION_ARN: ${{ steps.update-background-task-def.outputs.background-task-definition-arn }}
      run: |
        echo "🔄 Background Worker 서비스 배포 시작..."

        # Background Worker 서비스가 존재하는지 확인
        if aws ecs describe-services \
             --cluster ${{ env.ECS_CLUSTER }} \
             --services market-timing-background-service \
             --query 'services[0].serviceName' \
             --output text 2>/dev/null | grep -q "market-timing-background-service"; then

          echo "📦 Background Worker 서비스 업데이트 중..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service market-timing-background-service \
            --task-definition $BACKGROUND_TASK_DEFINITION_ARN \
            --force-new-deployment

          echo "✅ Background Worker 서비스 업데이트 완료!"
          
          # 서비스 안정화 대기
          echo "⏳ Background Worker 서비스 안정화 대기 중..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services market-timing-background-service
          
          echo "✅ Background Worker 서비스가 안정화되었습니다!"
        else
          echo "⚠️  Background Worker 서비스가 존재하지 않습니다. 수동으로 생성하세요."
          echo "    서비스명: market-timing-background-service"
          echo "    태스크 정의: market-timing-background"
        fi

    # 배포 결과 확인
    - name: Get deployment status
      if: always()
      run: |
        echo "📋 배포 결과 확인 중..."
        
        # 서비스 상태 확인
        SERVICE_STATUS=$(aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --query 'services[0].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount}' \
          --output json)
        
        echo "서비스 상태: $SERVICE_STATUS"
        
        # 실행 중인 태스크 확인
        RUNNING_TASKS=$(aws ecs list-tasks \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service-name ${{ env.ECS_SERVICE }} \
          --query 'taskArns' \
          --output text)
        
        if [ -n "$RUNNING_TASKS" ]; then
          echo "🎯 실행 중인 태스크: $RUNNING_TASKS"
          
          # 퍼블릭 IP 확인
          TASK_ARN=$(echo $RUNNING_TASKS | awk '{print $1}')
          PUBLIC_IP=$(aws ecs describe-tasks \
            --cluster ${{ env.ECS_CLUSTER }} \
            --tasks $TASK_ARN \
            --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' \
            --output text | \
            xargs -I {} aws ec2 describe-network-interfaces \
            --network-interface-ids {} \
            --query 'NetworkInterfaces[0].Association.PublicIp' \
            --output text 2>/dev/null)
          
          if [ -n "$PUBLIC_IP" ] && [ "$PUBLIC_IP" != "None" ]; then
            echo "🌐 FastAPI 애플리케이션 접속 정보:"
            echo "   퍼블릭 IP: $PUBLIC_IP"
            echo "   메인 URL: http://$PUBLIC_IP:8000"
            echo "   헬스체크: http://$PUBLIC_IP:8000/health"
            echo "   API 문서: http://$PUBLIC_IP:8000/docs"
          fi
        else
          echo "❌ 실행 중인 태스크가 없습니다."
        fi

    # Background Worker 서비스 상태 확인
    - name: Check background service status
      run: |
        echo "📋 Background Worker 서비스 상태 확인..."

        if aws ecs describe-services \
             --cluster ${{ env.ECS_CLUSTER }} \
             --services market-timing-background-service \
             --query 'services[0].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount}' \
             --output json 2>/dev/null; then
          echo "✅ Background Worker 서비스 상태 확인 완료"
        else
          echo "⚠️  Background Worker 서비스 상태를 확인할 수 없습니다."
        fi

    - name: Deploy status notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ 전체 애플리케이션 배포가 성공적으로 완료되었습니다!"
          echo "📦 배포된 서비스:"
          echo "   • FastAPI 메인 애플리케이션"
          echo "   • Background Worker (데이터 수집)"
          echo "🔍 AWS ECS 콘솔에서 서비스 상태를 확인하세요."
        else
          echo "❌ 배포 중 오류가 발생했습니다."
          echo "🔍 자세한 오류는 Actions 로그를 확인하세요."
          exit 1
        fi
