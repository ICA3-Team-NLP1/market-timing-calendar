services:
  # 메인 애플리케이션 (Frontend + Backend 통합)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development  # 개발 환경
    ports:
      - "8000:8000"
    environment:
      # 데이터베이스 연결
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/market_timing
      # 테스트용 데이터베이스 연결 (.env 파일에서 값을 가져와 주입)
      - TEST_DATABASE_URL=${TEST_DATABASE_URL:-postgresql://postgres:password@localhost:5432/market_timing_test}
      - TEST_DB_HOST=${TEST_DB_HOST:-localhost}

      # Google OAuth (환경변수에서 로드)
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-your_google_client_id}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-your_google_client_secret}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI:-http://localhost:8000/auth/callback}

      # JWT 설정
      - JWT_SECRET=${JWT_SECRET:-development_jwt_secret_key_min_32_chars}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-development_encryption_key_32_bytes}

      # 외부 API
      - OPENAI_API_KEY=${OPENAI_API_KEY:-sk-your_openai_api_key}
      - RESEND_API_KEY=${RESEND_API_KEY:-re_your_resend_api_key}

      # 앱 설정
      - NODE_ENV=development
      - DEBUG=true

      # 프론트 Firebase 설정
      - VITE_FIREBASE_API_KEY=${VITE_FIREBASE_API_KEY:-AIzaSyCaYBhQEGujz-oj-j2mvaSNHFlVnzrGztA}
      - VITE_FIREBASE_AUTH_DOMAIN=${VITE_FIREBASE_AUTH_DOMAIN:-market-timing-calendar.firebaseapp.com}
      - VITE_FIREBASE_PROJECT_ID=${VITE_FIREBASE_PROJECT_ID:-market-timing-calendar}
      - VITE_FIREBASE_STORAGE_BUCKET=${VITE_FIREBASE_STORAGE_BUCKET:-market-timing-calendar.firebasestorage.app}
      - VITE_FIREBASE_MESSAGING_SENDER_ID=${VITE_FIREBASE_MESSAGING_SENDER_ID:-539122761808}
      - VITE_FIREBASE_APP_ID=${VITE_FIREBASE_APP_ID:-1:539122761808:web:016249bad69b51190d1155}
      - VITE_FIREBASE_MEASUREMENT_ID=${VITE_FIREBASE_MEASUREMENT_ID:-G-5LPG8SK2EK}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # 개발 시 코드 변경 실시간 반영
      - ./frontend:/app/frontend
      - ./backend:/app/backend
      - ./backend/secrets:/app/secrets:ro    # secrets 폴더 볼륨 마운트 (읽기 전용)
      - /app/frontend/node_modules  # node_modules 제외
      - app_data:/app/data          # 앱 데이터 영속화
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (Celery 브로커)
  redis:
    image: redis:7-alpine
    container_name: redis-server
    ports:
      - "6379:6379"  # 외부 접속 허용 (개발용)
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

  # Background 서비스 (데이터 수집)
  background:
    build:
      context: .
      dockerfile: background/Dockerfile
      target: celery-worker
    environment:
      # Redis 연결
      - REDIS_URL=redis://redis:6379/0
      # 데이터베이스 연결
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/market_timing
      # 외부 API (데이터 수집용)
      - FRED_API_KEY=${FRED_API_KEY:-your_fred_api_key}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-sk-your_openai_api_key}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-sk-ant-your_anthropic_api_key}
      - YAHOO_FINANCE_API_KEY=${YAHOO_FINANCE_API_KEY:-your_yahoo_finance_key}
      - KOREA_BANK_API_KEY=${KOREA_BANK_API_KEY:-your_korea_bank_api_key}
      # LLM 설정
      - ACTIVE_LLM_PROVIDER=${ACTIVE_LLM_PROVIDER:-anthropic}
      - ACTIVE_LLM_MODEL=${ACTIVE_LLM_MODEL:-claude-3-5-sonnet-latest}
      - LLM_BATCH_SIZE=${LLM_BATCH_SIZE:-10}
      - LLM_API_DELAY=${LLM_API_DELAY:-0.5}
      - LLM_MAX_RETRIES=${LLM_MAX_RETRIES:-3}
      # 앱 설정
      - DEBUG=true
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      # 개발 시 코드 변경 실시간 반영 - 전체 프로젝트 마운트 필요
      - .:/app
      - background_data:/app/data  # 수집 데이터 임시 저장
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: market_timing
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "5432:5432"  # 외부 접속 허용 (개발용)
    volumes:
      # 영속적 데이터 저장
      - postgres_data:/var/lib/postgresql/data

      # 초기 데이터 실행
      - ./database/init:/docker-entrypoint-initdb.d:ro

      # PostgreSQL 설정 (선택적)
      # - ./postgres.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d market_timing"]
      interval: 10s
      timeout: 5s
      retries: 5
    # 리소스 제한 (선택적)
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    command: >
      sh -c "
        docker-entrypoint.sh postgres &
        until pg_isready -U postgres; do sleep 1; done
        psql -U postgres -c 'ALTER USER postgres WITH SUPERUSER;'
        psql -U postgres -tc \"SELECT 1 FROM pg_database WHERE datname = 'market_timing_test'\" | grep -q 1 || psql -U postgres -c 'CREATE DATABASE market_timing_test'
        wait
      "

# 영속적 볼륨
volumes:
  postgres_data:
    driver: local
    # 볼륨 위치 지정 (선택적)
    # driver_opts:
    #   o: bind
    #   type: none
    #   device: ./data/postgres
  redis_data:
    driver: local
  app_data:
    driver: local
    # 앱 데이터 (로그, 캐시 등)
  background_data:
    driver: local

# 네트워크 설정
networks:
  app-network:
    driver: bridge
    # 커스텀 IP 대역 (선택적)
    # ipam:
    #   config:
    #     - subnet: 172.20.0.0/16
